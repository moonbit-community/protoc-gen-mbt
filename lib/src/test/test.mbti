package "moonbit-community/protobuf/test"

import(
  "moonbit-community/protobuf/lib"
)

// Values

// Types and methods
pub(all) struct BarMessage {
  mut b_int32 : Int
}
impl @lib.Read for BarMessage
impl @lib.Write for BarMessage
impl Default for BarMessage
impl Eq for BarMessage
impl Show for BarMessage

pub(all) struct BazMessage {
  mut nested : BazMessage_Nested
  mut b_int64 : Int64
  mut b_string : String
}
impl @lib.Read for BazMessage
impl @lib.Write for BazMessage
impl Default for BazMessage
impl Eq for BazMessage
impl Show for BazMessage

pub(all) struct BazMessage_Nested {
  mut f_nested : BazMessage_Nested_NestedMessage
}
impl @lib.Read for BazMessage_Nested
impl @lib.Write for BazMessage_Nested
impl Default for BazMessage_Nested
impl Eq for BazMessage_Nested
impl Show for BazMessage_Nested

pub(all) enum BazMessage_Nested_NestedEnum {
  BazMessage_Nested_Foo
  BazMessage_Nested_Bar
  BazMessage_Nested_Baz
}
fn BazMessage_Nested_NestedEnum::from_enum(@lib.Enum) -> Self
fn BazMessage_Nested_NestedEnum::to_enum(Self) -> @lib.Enum
impl Default for BazMessage_Nested_NestedEnum
impl Eq for BazMessage_Nested_NestedEnum
impl Show for BazMessage_Nested_NestedEnum

pub(all) struct BazMessage_Nested_NestedMessage {
  mut f_nested : Int
}
impl @lib.Read for BazMessage_Nested_NestedMessage
impl @lib.Write for BazMessage_Nested_NestedMessage
impl Default for BazMessage_Nested_NestedMessage
impl Eq for BazMessage_Nested_NestedMessage
impl Show for BazMessage_Nested_NestedMessage

pub(all) enum FooEnum {
  FooEnum_FIRST_VALUE
  FooEnum_SECOND_VALUE
}
fn FooEnum::from_enum(@lib.Enum) -> Self
fn FooEnum::to_enum(Self) -> @lib.Enum
impl Default for FooEnum
impl Eq for FooEnum
impl Show for FooEnum

pub(all) struct FooMessage {
  mut f_int32 : Int
  mut f_int64 : Int64
  mut f_uint32 : UInt
  mut f_uint64 : UInt64
  mut f_sint32 : Int
  mut f_sint64 : Int64
  mut f_bool : Bool
  mut f_foo_enum : FooEnum
  mut f_fixed64 : UInt64
  mut f_sfixed64 : Int64
  mut f_fixed32 : UInt
  mut f_sfixed32 : Int
  mut f_double : Double
  mut f_float : Float
  mut f_bytes : Bytes
  mut f_string : String
  mut f_bar_message : BarMessage
  mut f_repeated_int32 : Array[Int]
  mut f_repeated_packed_int32 : Array[Int]
  mut f_repeated_packed_float : Array[Float]
  mut f_baz : BazMessage
  mut f_nested : BazMessage_Nested
  mut f_nested_enum : BazMessage_Nested_NestedEnum
  mut f_map : Map[String, Int]
  mut f_repeated_string : Array[String]
  mut f_repeated_baz_message : Array[BazMessage]
  mut f_optional_string : String?
  mut test_oneof : FooMessage_Testoneof
}
impl @lib.Read for FooMessage
impl @lib.Sized for FooMessage
impl @lib.Write for FooMessage
impl Default for FooMessage
impl Eq for FooMessage
impl Show for FooMessage

pub(all) struct FooMessage_FMapEntry {
  mut key : String
  mut value : Int
}
impl @lib.Read for FooMessage_FMapEntry
impl @lib.Sized for FooMessage_FMapEntry
impl @lib.Write for FooMessage_FMapEntry
impl Default for FooMessage_FMapEntry
impl Eq for FooMessage_FMapEntry
impl Show for FooMessage_FMapEntry

pub(all) enum FooMessage_Testoneof {
  F1(Int)
  F2(Bool)
  F3(String)
  NotSet
}
impl Default for FooMessage_Testoneof
impl Eq for FooMessage_Testoneof
impl Show for FooMessage_Testoneof

pub(all) struct RepeatedMessage {
  mut bar_message : Array[BarMessage]
}
impl @lib.Read for RepeatedMessage
impl @lib.Sized for RepeatedMessage
impl @lib.Write for RepeatedMessage
impl Default for RepeatedMessage
impl Eq for RepeatedMessage
impl Show for RepeatedMessage

// Type aliases

// Traits

