package "moonbit-community/protobuf/lib"

import(
  "moonbitlang/core/buffer"
)

// Values
fn[T : Reader] is_eof(T) -> Bool

fn[T : Reader] read_bool(T) -> Bool raise ReaderError

fn[T : Reader] read_double(T) -> Double raise ReaderError

fn[T : Reader] read_enum(T) -> Enum raise ReaderError

fn[T : Reader] read_fixed32(T) -> UInt raise ReaderError

fn[T : Reader] read_fixed64(T) -> UInt64 raise ReaderError

fn[T : Reader] read_float(T) -> Float raise ReaderError

fn[T : Reader] read_int32(T) -> Int raise ReaderError

fn[T : Reader] read_int64(T) -> Int64 raise ReaderError

fn[M : Read, R : Reader] read_message(R) -> M raise ReaderError

fn[M : Sized, R : Reader] read_packed(R, (&Reader) -> M raise ReaderError, UInt?) -> Array[M] raise ReaderError

fn[T : Reader] read_sfixed32(T) -> Int raise ReaderError

fn[T : Reader] read_sfixed64(T) -> Int64 raise ReaderError

fn[T : Reader] read_sint32(T) -> SInt raise ReaderError

fn[T : Reader] read_sint64(T) -> SInt64 raise ReaderError

fn[T : Reader] read_tag(T) -> (UInt, UInt) raise ReaderError

fn[T : Reader] read_uint32(T) -> UInt raise ReaderError

fn[T : Reader] read_uint64(T) -> UInt64 raise ReaderError

fn[T : Reader] read_unknown(T, UInt) -> Unit raise ReaderError

fn[T : Reader] read_varint32(T) -> UInt raise ReaderError

fn[T : Sized] size_of(T) -> UInt

fn[T : Writer] write_bool(T, Bool) -> Unit

fn[T : Writer] write_bytes(T, Bytes) -> Unit

fn[T : Writer] write_double(T, Double) -> Unit

fn[T : Writer] write_enum(T, Enum) -> Unit

fn[T : Writer] write_fixed32(T, UInt) -> Unit

fn[T : Writer] write_fixed64(T, UInt64) -> Unit

fn[T : Writer] write_float(T, Float) -> Unit

fn[T : Writer] write_int32(T, Int) -> Unit

fn[T : Writer] write_int64(T, Int64) -> Unit

fn[T : Writer] write_sfixed32(T, Int) -> Unit

fn[T : Writer] write_sfixed64(T, Int64) -> Unit

fn[T : Writer] write_sint32(T, Int) -> Unit

fn[T : Writer] write_sint64(T, Int64) -> Unit

fn[T : Writer] write_string(T, String) -> Unit

fn[T : Writer] write_tag(T, (UInt, UInt)) -> Unit

fn[T : Writer] write_uint32(T, UInt) -> Unit

fn[T : Writer] write_uint64(T, UInt64) -> Unit

fn[T : Writer] write_varint(T, UInt64) -> Unit

// Types and methods
type BytesReader
fn BytesReader::from_bytes(Bytes) -> Self
impl Reader for BytesReader
impl Show for BytesReader

pub(all) type Enum UInt
fn Enum::inner(Self) -> UInt
impl Sized for Enum
impl Default for Enum
impl Eq for Enum
impl Show for Enum

pub(all) type Len Int
fn Len::inner(Self) -> Int
impl Default for Len
impl Eq for Len
impl Show for Len

pub(all) suberror ReaderError {
  UnexpectedEnd
  InvalidString
  UnknownWireType(UInt)
}
impl Eq for ReaderError
impl Show for ReaderError

pub(all) type SInt Int
fn SInt::inner(Self) -> Int
impl Sized for SInt
impl Default for SInt
impl Eq for SInt
impl Show for SInt

pub(all) type SInt64 Int64
fn SInt64::inner(Self) -> Int64
impl Sized for SInt64
impl Default for SInt64
impl Eq for SInt64
impl Show for SInt64

fn Reader::read_bytes(&Self) -> Bytes raise ReaderError
fn Reader::read_string(&Self) -> String raise ReaderError

// Type aliases

// Traits
pub(open) trait Proto : Read + Write {
}

pub(open) trait Read {
  read(&Reader) -> Self raise ReaderError
}

pub(open) trait Reader {
  next(Self) -> Byte? = _
  next_bytes(Self, UInt) -> Bytes?
}

pub(open) trait Sized {
  size_of(Self) -> UInt
}
impl Sized for Bool
impl Sized for Int
impl Sized for Int64
impl Sized for UInt
impl Sized for UInt64
impl Sized for Float
impl Sized for Double
impl Sized for String
impl Sized for Bytes

pub(open) trait Write {
  write(Self, &Writer) -> Unit
}

pub(open) trait Writer {
  write_byte(Self, Byte) -> Unit = _
  write_bytes(Self, Bytes) -> Unit
}
impl Writer for @buffer.T

