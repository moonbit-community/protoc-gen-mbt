package "moonbit-community/protoc-gen-mbt"

import(
  "moonbit-community/protobuf-plugin/google/protobuf"
  "moonbit-community/protobuf-plugin/google/protobuf/compiler"
)

// Values
fn convert_args(String) -> Map[String, String]

fn encode_tag(Int, Int) -> UInt64

fn pascal_to_snake(String) -> String

fn sizeFixed32() -> UInt

fn sizeFixed64() -> UInt

fn size_tag(Int) -> Int

fn tag(@protobuf.FieldDescriptorProto_Type, Int, Bool) -> UInt64

fn to_camel_case(String) -> String

// Types and methods
pub(all) struct CodeGenerator {
  request : @compiler.CodeGeneratorRequest
  packages_map : Map[String, Package]
  package_descriptions : Map[String, Package]
  parameter : Map[String, String]
  files_to_generate : Array[@compiler.CodeGeneratorResponse_File]
  response : @compiler.CodeGeneratorResponse
  project_name : String
}
fn CodeGenerator::build_response(Self) -> @compiler.CodeGeneratorResponse
fn CodeGenerator::find_enum(Self, String) -> Enum?
fn CodeGenerator::find_message(Self, String) -> Message?
fn CodeGenerator::gen_enum(Self, Enum, StringBuilder) -> Unit
fn CodeGenerator::gen_field_read(Self, Field, StringBuilder) -> Unit
fn CodeGenerator::gen_file(Self, Package) -> Unit
fn CodeGenerator::gen_message(Self, Message, StringBuilder) -> Unit
fn CodeGenerator::gen_message_default(Self, Message, StringBuilder) -> Unit
fn CodeGenerator::gen_message_reader(Self, Message, StringBuilder) -> Unit
fn CodeGenerator::gen_message_size(Self, Message, StringBuilder) -> Unit
fn CodeGenerator::gen_message_writer(Self, Message, StringBuilder) -> Unit
fn CodeGenerator::gen_messages(Self, Array[Message], StringBuilder) -> Unit
fn CodeGenerator::gen_module(Self) -> Unit
fn CodeGenerator::gen_oneof_enum(Self, Message, OneOf, StringBuilder) -> Unit
fn CodeGenerator::gen_package(Self, Package) -> Unit
fn CodeGenerator::gen_repeated_field_read(Self, Field, StringBuilder) -> Unit
fn CodeGenerator::get_oneof_enum_name(Self, Message, String) -> String
fn CodeGenerator::new(@compiler.CodeGeneratorRequest) -> Self
fn CodeGenerator::push_file(Self, File) -> Unit

pub(all) struct Enum {
  desc : @protobuf.EnumDescriptorProto
  file : Package?
  import_path : ImportPath
  name : String
  parent : Message?
  options : @protobuf.EnumOptions?
  value : Array[@protobuf.EnumValueDescriptorProto]
}
fn Enum::from_file(@protobuf.EnumDescriptorProto, Package) -> Self
fn Enum::from_message(@protobuf.EnumDescriptorProto, Message) -> Self
impl Eq for Enum
impl Show for Enum

pub(all) struct Field {
  desc : @protobuf.FieldDescriptorProto
  import_path : ImportPath
  parent : Message
  type_ : @protobuf.FieldDescriptorProto_Type?
  type_name : String?
  json_name : String?
  options : @protobuf.FieldOptions?
  name : String
  oneof_index : Int?
  number : Int?
  proto3optional : Bool?
}
fn Field::from(@protobuf.FieldDescriptorProto, Message) -> Self
fn Field::is_enum(Self) -> Bool
fn Field::is_list(Self) -> Bool
fn Field::is_map(Self) -> Bool
fn Field::is_message(Self) -> Bool
fn Field::is_oneof(Self) -> Bool
fn Field::is_optional(Self) -> Bool
fn Field::is_pack(Self) -> Bool
fn Field::is_synthetic_oneof(Self) -> Bool
fn Field::map_key_value(Self) -> Message?
impl Eq for Field
impl Show for Field

pub struct File {
  name : String
  content : StringBuilder
}
fn File::from_builder(String, content~ : StringBuilder) -> Self
fn File::new(String, content~ : String) -> Self

type ImportPath
fn ImportPath::append(Self, String) -> Self
fn ImportPath::from(String, package_name~ : String = ..) -> Self
fn ImportPath::has_prefix(Self, Self) -> Bool
fn ImportPath::name(Self) -> String
fn ImportPath::parent_name(Self) -> String
fn ImportPath::path(Self) -> String
fn ImportPath::to_string(Self) -> String
impl Eq for ImportPath
impl Show for ImportPath

pub(all) struct Message {
  desc : @protobuf.DescriptorProto
  import_path : ImportPath
  name : String
  file : Package?
  parent : Message?
  fields : Array[Field]
  oneofs : Array[OneOf]
  messages : Array[Message]
  enums : Array[Enum]
  options : @protobuf.MessageOptions?
}
fn Message::child(@protobuf.DescriptorProto, Self) -> Self
fn Message::find_enum_interface(Self, ImportPath) -> Enum?
fn Message::find_field_by_type_name(Self, String) -> Field?
fn Message::find_message_interface(Self, ImportPath) -> Self?
fn Message::from_file(@protobuf.DescriptorProto, Package) -> Self
fn Message::get_oneof_fields_by_index(Self, Int) -> Array[Field]
fn Message::is_map(Self) -> Bool
impl Eq for Message
impl Show for Message

pub(all) struct OneOf {
  desc : @protobuf.OneofDescriptorProto
  import_path : ImportPath
  file : Package?
  parent : Message?
  options : @protobuf.OneofOptions?
  field : Array[Field]
  name : String
}
fn OneOf::from_message(Message, @protobuf.OneofDescriptorProto, Array[Field]) -> Self
impl Eq for OneOf
impl Show for OneOf

pub(all) struct Package {
  desc : @protobuf.FileDescriptorProto
  message_type : Array[Message]
  enums : Array[Enum]
  name : String
  package_name : String
  import_path : ImportPath
  options : @protobuf.FileOptions?
  dependency : Array[Package]
}
fn Package::find_enum_by_path(Self, ImportPath) -> Enum?
fn Package::find_message_by_path(Self, ImportPath) -> Message?
fn Package::from(@protobuf.FileDescriptorProto, file_descriptors_map~ : Map[String, Self] = ..) -> Self
impl Eq for Package
impl Show for Package

// Type aliases
pub typealias @protobuf.FieldDescriptorProto_Type as FieldType

// Traits

