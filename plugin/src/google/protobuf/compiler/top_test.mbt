///|
fn run_protoscope_test(input : Bytes) -> String raise {
  @async.start(async fn() {
    let stdout = @async.Pipe::new()
    let stdin = @async.Pipe::new()
    let process = @async.spawn(
      "protoscope",
      [],
      stdout=Pipe(stdout),
      stdin=Pipe(stdin),
    )
    stdin.write_bytes(input)
    stdin.close()
    inspect(process.status(), content="0")
    return stdout.read_text(encoding=UTF8)
  })
}

///|
test "CodeGeneratorRequest::size_of/empty_arrays" {

  // Test with empty arrays but non-empty strings
  let request_empty_arrays = @compiler.CodeGeneratorRequest::default()
  request_empty_arrays.file_to_generate = ["test_parameter"]
  request_empty_arrays.parameter = Some("test_parameter")
  request_empty_arrays.proto_file = []
  request_empty_arrays.source_file_descriptors = []
  let size = request_empty_arrays.size_of()
  inspect(size > 0U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_empty_arrays, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b"\x0a\x0e\x74\x65\x73\x74\x5f\x70\x61\x72\x61\x6d\x65\x74\x65\x72\x12\x0e\x74\x65\x73\x74\x5f\x70\x61\x72\x61\x6d\x65\x74\x65\x72"

    ),
  )
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"test_parameter"}
      #|2: {"test_parameter"}
      #|

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/large_arrays" {
  // Test with large number of files
  let many_files = Array::makei(100, fn(i) { "file\{i}.proto" })
  let request_many_files = CodeGeneratorRequest::default()
  request_many_files.file_to_generate = many_files
  let size = request_many_files.size_of()
  inspect(size > 100U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_many_files, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b"\x0a\x0b\x66\x69\x6c\x65\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0b\x66\x69\x6c\x65\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x31\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x32\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x33\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x34\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x35\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x36\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x37\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x38\x39\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0c\x66\x69\x6c\x65\x39\x39\x2e\x70\x72\x6f\x74\x6f"

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/single_file" {
  // Test with single file
  let request_single_file = CodeGeneratorRequest::default()
  request_single_file.file_to_generate = ["main.proto"]
  let size = request_single_file.size_of()
  inspect(size > 10U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_single_file, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b"\x0a\x0a\x6d\x61\x69\x6e\x2e\x70\x72\x6f\x74\x6f"

    ),
  )
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"main.proto"}
      #|

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/with_parameter" {
  // Test with parameter and files
  // let request_with_param = {
  //   file_to_generate: ["test.proto", "util.proto"],
  //   parameter: "output_dir=/tmp",
  //   proto_file: [],
  //   source_file_descriptors: [],
  //   compiler_version: Version::default(),
  // }
  let request_with_param = CodeGeneratorRequest::default()
  request_with_param.file_to_generate = ["test.proto", "util.proto"]
  request_with_param.parameter = Some("output_dir=/tmp")
  let size = request_with_param.size_of()
  inspect(size > 20U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_with_param, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b"\x0a\x0a\x74\x65\x73\x74\x2e\x70\x72\x6f\x74\x6f\x0a\x0a\x75\x74\x69\x6c\x2e\x70\x72\x6f\x74\x6f\x12\x0f\x6f\x75\x74\x70\x75\x74\x5f\x64\x69\x72\x3d\x2f\x74\x6d\x70"

    ),
  )
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"test.proto"}
      #|1: {"util.proto"}
      #|2: {"output_dir=/tmp"}
      #|

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/empty_request" {
  // Test with completely empty request
  let request_empty = CodeGeneratorRequest::default()
  let size = request_empty.size_of()
  inspect(size > 0U, content="false")
  let writer = @buffer.new()
  @lib.Write::write(request_empty, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b""

    ),
  )
  inspect(
    run_protoscope_test(bytes),
    content=(
      ""
    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/medium_files" {
  // Test with medium number of files (10)
  let medium_files = Array::makei(10, fn(i) { "module\{i}.proto" })
  // let request_medium_files = {
  //   file_to_generate: medium_files,
  //   parameter: "lang=mbt",
  //   proto_file: [],
  //   source_file_descriptors: [],
  //   compiler_version: Version::default(),
  // }
  let request_medium_files = CodeGeneratorRequest::default()
  request_medium_files.file_to_generate = medium_files
  request_medium_files.parameter = Some("lang=mbt")
  let size = request_medium_files.size_of()
  inspect(size > 50U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_medium_files, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b"\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x30\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x31\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x32\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x33\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x34\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x35\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x36\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x37\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x38\x2e\x70\x72\x6f\x74\x6f\x0a\x0d\x6d\x6f\x64\x75\x6c\x65\x39\x2e\x70\x72\x6f\x74\x6f\x12\x08\x6c\x61\x6e\x67\x3d\x6d\x62\x74"

    ),
  )
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"module0.proto"}
      #|1: {"module1.proto"}
      #|1: {"module2.proto"}
      #|1: {"module3.proto"}
      #|1: {"module4.proto"}
      #|1: {"module5.proto"}
      #|1: {"module6.proto"}
      #|1: {"module7.proto"}
      #|1: {"module8.proto"}
      #|1: {"module9.proto"}
      #|2: {"lang=mbt"}
      #|

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/special_characters" {
  // Test with files containing special characters
  let special_files = ["测试.proto", "файл.proto", "файл-2.proto"]
  // let request_special = {
  //   file_to_generate: special_files,
  //   parameter: "unicode=true",
  //   proto_file: [],
  //   source_file_descriptors: [],
  //   compiler_version: Version::default(),
  // }
  let request_special = CodeGeneratorRequest::default()
  request_special.file_to_generate = special_files
  request_special.parameter = Some("unicode=true")
  let size = request_special.size_of()
  inspect(size > 30U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_special, writer)
  let bytes = writer.to_bytes()
  // Note: The exact bytes will depend on UTF-8 encoding of special characters
  inspect(bytes.length() > 40, content="true")
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"测试.proto"}
      #|1: {"файл.proto"}
      #|1: {"файл-2.proto"}
      #|2: {"unicode=true"}
      #|

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/long_parameter" {
  // Test with very long parameter string
  let long_param = "very_long_parameter_" + Array::make(50, "option").join("_")

  let request_long_param = CodeGeneratorRequest::default()
  request_long_param.file_to_generate = ["test.proto"]
  request_long_param.parameter = Some(long_param)
  let size = request_long_param.size_of()
  inspect(size > 300U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_long_param, writer)
  let bytes = writer.to_bytes()
  inspect(bytes.length() > 300, content="true")
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"test.proto"}
      #|2: {
      #|  "very_long_parameter_option_option_option_option_option_option_option_option_opti"
      #|  "on_option_option_option_option_option_option_option_option_option_option_option_"
      #|  "option_option_option_option_option_option_option_option_option_option_option_opt"
      #|  "ion_option_option_option_option_option_option_option_option_option_option_option"
      #|  "_option_option_option_option_option_option_option"
      #|}
      #|

    ),
  )
}

///|
test "CodeGeneratorRequest::size_of/mixed_filename_lengths" {
  // Test with files of varying name lengths
  let mixed_files = [
    "a.proto", "medium_name.proto", "very_very_very_long_filename_with_lots_of_characters.proto",
  ]
  // let request_mixed = {
  //   file_to_generate: mixed_files,
  //   parameter: "format=json",
  //   proto_file: [],
  //   source_file_descriptors: [],
  //   compiler_version: Version::default(),
  // }
  let request_mixed = CodeGeneratorRequest::default()
  request_mixed.file_to_generate = mixed_files
  request_mixed.parameter = Some("format=json")
  let size = request_mixed.size_of()
  inspect(size > 80U, content="true")
  let writer = @buffer.new()
  @lib.Write::write(request_mixed, writer)
  let bytes = writer.to_bytes()
  inspect(
    bytes,
    content=(
      #|b"\x0a\x07\x61\x2e\x70\x72\x6f\x74\x6f\x0a\x11\x6d\x65\x64\x69\x75\x6d\x5f\x6e\x61\x6d\x65\x2e\x70\x72\x6f\x74\x6f\x0a\x3a\x76\x65\x72\x79\x5f\x76\x65\x72\x79\x5f\x76\x65\x72\x79\x5f\x6c\x6f\x6e\x67\x5f\x66\x69\x6c\x65\x6e\x61\x6d\x65\x5f\x77\x69\x74\x68\x5f\x6c\x6f\x74\x73\x5f\x6f\x66\x5f\x63\x68\x61\x72\x61\x63\x74\x65\x72\x73\x2e\x70\x72\x6f\x74\x6f\x12\x0b\x66\x6f\x72\x6d\x61\x74\x3d\x6a\x73\x6f\x6e"

    ),
  )
  inspect(
    run_protoscope_test(bytes),
    content=(
      #|1: {"a.proto"}
      #|1: {"medium_name.proto"}
      #|1: {"very_very_very_long_filename_with_lots_of_characters.proto"}
      #|2: {"format=json"}
      #|

    ),
  )
}


